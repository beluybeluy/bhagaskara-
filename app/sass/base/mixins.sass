//keyframes
@mixin keyframes($name)
  @-webkit-keyframes #{$name}
    @content
  @-moz-keyframes #{$name}
    @content
  @-ms-keyframes #{$name}
    @content
  @keyframes #{$name}
    @content
//---MEDIAQUERIES---
@mixin desktop 
  @media screen  and(max-width: #{$desktop}) 
    @content

@mixin tablet 
  @media screen and(max-width: #{$tablet}) 
    @content

@mixin xlPhone 
  @media screen and(max-width: #{$xlPhone}) 
    @content

@mixin xsPhone 
  @media screen and(max-width: #{$xsPhone}) 
    @content
//---BORDER---  
@mixin brd($color,$size: 1px,$type: solid)
   border: $color $size $type
//--TRANSITION---
@mixin transition($time)
   transition: all $time ease
//---PSEUDO---
@mixin pseudo($display: block, $pos: absolute, $content: '')
   content: $content
   display: $display
   position: $pos
//----TRINGLES---   
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false)
  +pseudo($pos: $position)
  width: 0;
  height: 0;
  @if $round 
    border-radius: 3px
  @if $direction == down 
    border-left: $size solid transparent
    border-right: $size solid transparent
    border-top: $size solid $color
    margin-top: 0 - round( $size / 2.5 )
  @else if $direction == up 
    border-left: $size solid transparent
    border-right: $size solid transparent
    border-bottom: $size solid $color
    margin-bottom: 0 - round( $size / 2.5 )
  @else if $direction == right 
    border-top: $size solid transparent
    border-bottom: $size solid transparent
    border-left: $size solid $color
    margin-right: -$size
  @else if  $direction == left
    border-top: $size solid transparent
    border-bottom: $size solid transparent
    border-right: $size solid $color
    margin-left: -$size
//-FONT---
@mixin font-source-sans($size: false, $colour: false, $weight: false,  $lh: false) 
  font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;
  @if $size { font-size: $size; }
  @if $colour { color: $colour; }
  @if $weight { font-weight: $weight; }
  @if $lh { line-height: $lh; }

/** 
 * Smooth Hexagon on CSS(Sass + Compass).
 * Colours, border radius, background image and other settings can be configured in a mixin call.
 */


/** 
 * Cглаженный шестиугольник на CSS(Sass + Compass).
 * При вызове миксина можно настроить цветa, радиус скругления, фоновое изображение и другие параметры.
 */

@mixin smooth-hexagon( // defaults
// настройки по умолчанию
$module-selector: '.hex-module',
$margin: 0,
$width: 150px,
$border-radius: 20px,
$background: #959595,
$background-hover: $background,
$cursor: default,
$stroke: false,
$stroke-width: 0,
$stroke-fill: none,
$stroke-fill-hover: $stroke-fill,
$opacity: 1,
$transition: none) 
  $rect-radius: $border-radius;
  $rect-height: ($width - 2 * $rect-radius) / 1.73 + 2 * $rect-radius;
  //$rect-height: $rect-radius;
  $height: 2 * ($rect-height - $rect-radius);
  $mask-top: ($height - $rect-height) / 2;
  %hex-container 
    width: $width;
    height: $height;
  %hex-mask 
    position: absolute;
    top: $mask-top;
    left: 0;
    overflow: hidden;
    width: $width;
    height: $rect-height;
    border-radius: $rect-radius;
  %hex-part 
    @extend %hex-container;
    overflow: hidden;
    margin-top: -$mask-top;
    cursor: $cursor;
    transition: $transition;
  %turned-rect 
    > .hex-mask2,
    .hex-part3 
      transform: rotate(60deg);
    
    > .hex-mask3,
    .hex-part2 
      transform: rotate(-60deg);
    
  
  #{$module-selector} 
    @extend %hex-container;
    margin: $margin;
    position: relative;
    opacity: $opacity;
    > .hex-fill 
      position: relative;
      z-index: 1;
      @extend %hex-container;
    
    > .hex-fill > .hex-mask 
      @extend %hex-mask;
    
    > .hex-fill 
      .hex-part 
        @extend %hex-part;
        background: $background 50% 50% no-repeat;
      
    > .hex-fill 
      @extend %turned-rect;
    
  @if $stroke==true 
    $inner-width: $width - $stroke-width * 2;
    $inner-height: $height - $stroke-width * 2;
    $inner-rect-radius: $rect-radius - $stroke-width;
    $inner-rect-height: ($inner-width - 2 * $inner-rect-radius) / 1.73 + 2 * $inner-rect-radius;
    %inner-hex-container 
      width: $inner-width;
      height: $inner-height;
    
    #{$module-selector} 
      > .hex-fill 
        top: $stroke-width;
        left: $stroke-width;
        @extend %inner-hex-container;
      
      > .hex-fill > .hex-mask 
        width: $inner-width;
        height: $inner-rect-height;
        border-radius: $inner-rect-radius;
      
      > .hex-fill 
        .hex-part 
          @extend %inner-hex-container;
      
      > .hex-stroke 
        position: absolute;
        top: 0;
        left: 0;
        z-index: 0;
        @extend %hex-container;
      
      > .hex-stroke > .hex-mask 
        @extend %hex-mask;
      
      > .hex-stroke 
        .hex-part 
          @extend %hex-part;
          background: $stroke-fill 50% 50%;
      &:hover > .hex-stroke 
        .hex-part 
          background: $stroke-fill-hover 50% 50%;
        
      
      > .hex-stroke 
        @extend %turned-rect;
      
    
  




